#ifndef PACKETS_H
#define PACKETS_H

////////////////////////////////
////////////////////////////////
//LOGIN PACKETS HERE
////////////////////////////////
////////////////////////////////
////////////////////////////////
////////////////////////////////









char ackseq_segment[] = {
0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 
};

char clientloginreqdonotsend[] = {
0x00, 0x00, 0x0B, 0x00, 
0x02, 0x20, 0x38, 0x61, 

0x82, 0x54, 0xC4, 0xC4, 
0xF4, 0x04, 0x22, 

0x55, 0x64, 0x95, 0x34, 0x95, 0xF4, 0xE4, 0xD4, 0x03, 

0x03, 0xD2, 0x94, 0xE4, 

0x64, 0x55, 0x24, 0xD5, 0x33, 0x13, 0x43, 0x93, 0x03,  
0x62, 0x55, 0x24, 0xD5, 0x33, 0x13, 0x83, 0x63, 0x03, 

/*
0x64,
0x62, 
diff: 2
-------
0x43, 0x93, 0x03,  
0x83, 0x63, 0x03, 
diff: +40
diff: +30
*/


0x10, 
};

char SMSG_LOGINRESP[] = {
//0x00, 0x80, 0x00, 0x80,
0x00, // seq 
0x00, 0x02, 0x80, //?

0x00, 0x08, 0x62, 0xC0, 

0x0C, 0x21, 0x05, 0x31, 0x31, 0x15, 0x39, 0x1D, 0x15, //match1


0x81, 
0x58, 0x15, 0x49, 

0xF5, 0xCC, //F5 CC (204)

0xC4, 0xE0, 

0xD8, 

0x80, //cmd seperator?

0x0C, 0x21, 0x05, 0x31, 0x31, 0x15, 0x39, 0x1D, 0x15, //match1

0xF5, 0xC8, //F5 C8 (200) CC - 4
0xC4,

0xCC, 0xE0, 

//wtf these 2 get switched around. like diagonally 
0xCC, 0xD4, 
0xC4, 0xDC, 


0xD8, 0xD4, 

0x80, 
0x4C, 0x51, 0x05, 
0x51, 0x4D, 

0xF5, 0xC4, //F5 C4 (196) C4 = C8 - 4
0x00, 0x04, 
};

char SMSG_LOGININFORESP[] = {
0x00,
0x80, 0x01, 
0x80, 0x02, 
0x00, 0x02, 
0x00, 0x01, 
0x08, 0x26, 0x48, 0x30, 

0x3D, 0x1D, //match2
0x25, 0x39, //match1
0x4D, //dec 77
0x15, 0x49, //match3
0x59, //dec 89
0x15, 0x49, //match3
0x7D, //dec 125

0x31, //dec 49 ascii 1
0x3D, 0x1D, //match2
0x25, 0x39, //match1
0x01, 0x04, 
};

char SMSG_SERVLIST[] = {
0x07, 0x00, 0x06, 0x80, 0x00, 0x20, 0xAC, 0xB4, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x04, 0x94, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 
0x00, 0x68, 0x07, 0x00, 0x00, 


//0x08, 0x01, 0x94, 0x01, 0xD0, 0x01, 0x84, 0x01, 0x80, 0x00, 0x4C, 0x01, 0x94, 0x01, 0xC8, 0x01, 0xD8, 0x01, 0x94, 0x01, 0xC8, 0x01, 0x00, 0x00, //Beta Server
//0xC4, 0x00, 0xCC, 0x00, 0xCC, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //1337

0x48, 0x01, 0x84, 0x01, 0xB4, 0x01, 0xCC, 0x01, 0x94, 0x01, 0xE4, 0x01, 0x98, 0x01, 0xD0, 0x01, 0xDC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Ramseyftw

//CONVERT ASCII: WORKING
//encrypt text: hex ascii code (in hex) * 4 (IN DEC) then back to hex = crypted
//decrypt: cryptd (in hex) / 4 (in dec) then back to hex = original ascii code



//original population / serv status:
//0x04, 0x6C, 0x14, 
//0x32, 0x71, 0x07, 0x00, 0x00, 
//

0x04, //SERVER STATUS FLAG | 00 - 03 = Down | 04, 05, 06 = UP | FF = Down 
0x6C, 0x14, 0x32, //? No idea
0x05, 0x00, //population

/*
population observations
12 = 0x31, 0x00,
9 = 0x25, 0x00,
4 = 0x10, 0x00,
-----
CONCLUSION:
1 player in population = 0x05, 0x00
*/

0x00, 0x00,


//0x08, 0x01, 0x94, 0x01, 0xD0, 0x01, 0x84, 0x01, 0x80, 0x00, 0x4C, 0x01, 0x94, 0x01, 0xC8, 0x01, 0xD8, 0x01, 0x94, 0x01, 0xC8, 0x01, 0x00, 0x00, //Beta Server
0x48, 0x01, 0x84, 0x01, 0xB4, 0x01, 0xCC, 0x01, 0x94, 0x01, 0xE4, 0x01, 0x98, 0x01, 0xD0, 0x01, 0xDC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Ramseyftw



//another server (optional) lets work with 1 server for now
//0x48, 0x01, 0x84, 0x01, 0xB4, 0x01, 0xCC, 0x01, 0x94, 0x01, 0xE4, 0x01, 0x98, 0x01, 0xD0, 0x01, 0xDC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Ramseyftw

0x54, 0x00, 0x04, 
};


#endif
